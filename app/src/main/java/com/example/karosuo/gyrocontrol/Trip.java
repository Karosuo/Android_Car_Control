package com.example.karosuo.gyrocontrol;

/**
 * Created by karosuo on 30/07/16.
 */
import android.content.Context;
import android.net.Uri;
import android.widget.Toast;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Created by karosuo on 28/07/16.
 */
public class Trip {
    private int id;
    private String name;
    private Uri imgUri;
    private String fecha;
    private String trayectoria;
    private int duracion; //duration in seconds


    public Trip(){
        /** Initialize in a null state.
         * This is used when want to init externally each member and reduce the amount of
         * parameters and increase readability*/
        this.setName(null);
        this.setImgUri(null);
        this.setTrayectoria(null);
        this.setDuracion(0);
        setId(0);
    }

    public Trip(String name, String imgUri, String trayectoria, int duracion){
        this.setName(name);
        this.setImgUri(imgUri);
        this.setTrayectoria(trayectoria);
        this.setDuracion(duracion);
        setId(0);
        /** ID of Trip is generated by the DB, but it exists on the object in order
         * to be able to set it when reads a trip from DB and wants to keep it's ID.
         * Mostly used when you make a search and wants to delete one of the occurences*/
    }

    public void setId(int newID){
        this.id = newID;
    }

    public int getId(){
        return this.id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getImgUri() {
        return imgUri.toString();
    }

    public void setImgUri(String imgUri) {
        if (imgUri == null){
            this.imgUri = Uri.parse("android.resource://com.example.karosuo.carcontrol/drawable/default_map.png");
        }else {
            this.imgUri = Uri.parse(imgUri);
        }
    }

    public String getFecha() {
        return this.fecha;
    }

    /** Gets the components of the date in the string.
     * D - Month/day part index 0
     * H - Hour/min part, without seconds index 1
     * */
    public String[] getFechaDH(){
        String[] dateComponents; //D-H components
        String[] HMSComponents; //HH:mm:ss components
        dateComponents = getFecha().split(" ");

        HMSComponents = dateComponents[1].split(":"); //split the H part into HH:mm:ss components

        dateComponents[1] = String.format("%s:%s",HMSComponents[0], HMSComponents[1]); //Set to H component, just the HH:mm part
        return dateComponents;
    }

    public void setFecha(String newFecha) {
        this.fecha = newFecha;
    }

    public String getTrayectoria() {
        return trayectoria;
    }

    public void setTrayectoria(String trayectoria) {
        this.trayectoria = trayectoria;
    }

    public int getDuracion() {
        return duracion;
    }

    public String getStringDuracion(Context c){ return getPrintableTime(secsToString(),c); }

    private String getPrintableTime(int[] components, Context c){
        String string_time = null;
        if (components[3] == 31){
            string_time = String.format("Too much");
        }else{
            if (components[3] == 0){ //if not days
                if (components[2] == 0){ //if not hrs
                    if (components[1] == 0){ //if not minutes
                        if (components[0] == 0){ //if not secods
                            string_time = String.format("Nothing");
                        }else{
                            string_time = String.format("%d %s",components[0],"secs");
                        }
                    }else{
                        if (components[0] == 0){ //If no secs with mins, then don't show'em
                            string_time = String.format("%d mins",components[1]);
                        }else{
                            string_time = String.format("%d mins, %d %s",components[1],components[0],"secs");
                        }
                    }
                }else{
                    if (components[1] == 0){ //If no minutes with hourse, then don't show'em
                        string_time = String.format("%d hrs",components[2]);
                    }
                    else{
                        string_time = String.format("%d hrs, %d mins",components[2],components[1]);
                    }
                }
            }else{
                if (components[2] == 0){
                    string_time = String.format("%d %s",components[3], "days");
                }else{
                    string_time = String.format("%d %s, %d hrs",components[3], "days",components[2]);
                }
            }
        }

        return string_time;
    }

    private int[] secsToString(){
        /** Convert raw secs int, into a separated, day, hrs, min secs array
         * Components:
         * 0 - Seconds
         * 1 - mins
         * 2 - hrs
         * 3 - days
         * */
        int[] components = new int[4];
        int rawSecs = this.duracion;

        if (this.duracion >= 2678400) //31 days
        {
            components[3] = 31; //Printer function will put "too much"
        }else
        {
            components[0] = rawSecs % 60; //Seconds
            rawSecs /= 60;
            if (rawSecs >= 60)
            {
                components[1] = rawSecs % 60; //Minutes
                rawSecs /= 60;
                if (rawSecs >= 24)
                {
                    components[2] = rawSecs % 24; //Hrs
                    components[3] = rawSecs / 24; //Days
                }else{
                    components[2] = rawSecs; //Hrs, totally not more than 24
                }
            }else{
                components[1] = rawSecs; //Minutes, totally not more than 60
            }
        }
        return components;
    }

    public void setDuracion(int duracion) {
        this.duracion = duracion;
    }

    public String toString(){
        return getName();
    }
}
